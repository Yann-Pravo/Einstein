        -:    0:Source:../src/source/Graph.c
        -:    0:Graph:../src/source/Graph.gcno
        -:    0:Data:../src/source/Graph.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:/*
        -:    2: _____ ___ _   _ ____ _____ _____ ___ _   _ 
        -:    3:| ____|_ _| \ | / ___|_   _| ____|_ _| \ | |
        -:    4:|  _|  | ||  \| \___ \ | | |  _|  | ||  \| |
        -:    5:| |___ | || |\  |___) || | | |___ | || |\  |
        -:    6:|_____|___|_| \_|____/ |_| |_____|___|_| \_|
        -:    7:
        -:    8:Einstein Is a New and Super-fast Traveler Engine for Intellectual Newbies.
        -:    9:
        -:   10:Coders:
        -:   11:ca.raymond(at)free(dot)fr
        -:   12:jerome.audoux(at)polytech.univ-montp2(dot)fr
        -:   13:justine.ranc(at)hotmail(dot)fr
        -:   14:yann.pravo(at)gmail(dot)com
        -:   15:
        -:   16:Repo: http://github.com/polytech-projet-ig3/r4
        -:   17:*/
        -:   18:
        -:   19:#include "../headers/City.h"
        -:   20:#include "../headers/Graph.h"
        -:   21:#include <string.h>
        -:   22:
        -:   23:/*
        -:   24:*	Crée une matrice vide de la taille passée en paramètre
        -:   25:*	Toutes les cases sont initialisées à 0
        -:   26:*
        -:   27:*	@param sizeMatrix, taille de la matrice
        -:   28:*	@return une matrice de floats initialisée à 0 de la taille donnée
        -:   29:*/
        3:   30:float** initMatrix(int sizeMatrix)
        -:   31:{
        -:   32:	float** matrixEmpty;
        -:   33:	int i;
        -:   34:
        3:   35:	matrixEmpty = (float**) calloc(sizeMatrix, sizeof (float*));
        -:   36:	
       12:   37:	for (i = 0; i < sizeMatrix; i++)
        -:   38:	{
        9:   39:		matrixEmpty[i] = (float*) calloc(sizeMatrix, sizeof (float));
        -:   40:	}
        -:   41:	
        3:   42:	return matrixEmpty;
        -:   43:}
        -:   44:
        -:   45:/*
        -:   46:*	Crée une matrice remplie avec les informations passées en paramètre
        -:   47:*
        -:   48:*	@param matrixCities, tableau des villes contenant les arêtes du graphe grâce aux coordonnées
        -:   49:*	@param nbCities, nombre de villes (taille) de la matrice
        -:   50:*	@return une matrice de floats complétée avec les infos en param
        -:   51:*/
        -:   52:
        3:   53:float** createMatrix(struct City *matrixCities, int nbCities, float autonomy)
        -:   54:{
        -:   55:	float **matrix;
        -:   56:	float d;
        -:   57:	int i,j;
        -:   58:	
        3:   59:	matrix = initMatrix(nbCities);
        -:   60:
        9:   61:	for(i = 0; i < nbCities-1; i++)
        -:   62:	{
       15:   63:		for(j = i+1; j < nbCities; j++)
        -:   64:		{
        -:   65:			/* si deux villes sont a plus de 300km on ne les relie pas */
        9:   66:			d = distance(matrixCities[i], matrixCities[j]);
        9:   67:			if (d > autonomy)
        -:   68:			{
        1:   69:				matrix[i][j] = -1.0;
        -:   70:			}
        -:   71:			else
        -:   72:			{
        8:   73:				matrix[i][j] = d;
        -:   74:			}
        -:   75:		}
        -:   76:	}
        -:   77:	
        3:   78:	return matrix;
        -:   79:}
        -:   80:
        -:   81:/*
        -:   82:*	Est uniquement utilisé dans la fonction quickSortPopulation pour connaître la plus grande population entre 2 villes
        -:   83:*
        -:   84:*	@param cityA, ville contenant le nom, la population et les coordonnées de la ville A.
        -:   85:*	@param cityB, ville contenant le nom, la population et les coordonnées de la ville B.
        -:   86:*	@return un entier, la différence de population entre les 2 villes
        -:   87:*/
    #####:   88:int sortByPopulation(void const *cityA, void const *cityB)
        -:   89:{
    #####:   90:	struct City const *cCityA = cityA;
    #####:   91:	struct City const *cCityB = cityB;
        -:   92:
    #####:   93:	return(cCityB->populationCity - cCityA->populationCity);
        -:   94:}
        -:   95:
        -:   96:/*
        -:   97:*	Est uniquement utilisé dans la fonction quickSortDistance pour connaître la plus petite distance entre 2 villes
        -:   98:*
        -:   99:*	@param edgeA, arête contenant les deux sommets (villes) de l'arête et la distance entre ces deux villes.
        -:  100:*	@param edgeB, arête contenant les deux sommets (villes) de l'arête et la distance entre ces deux villes.
        -:  101:*	@return un entier, la différence de distance entre les 2 villes
        -:  102:*/
    #####:  103:int sortByDistance(void const *edgeA, void const *edgeB)
        -:  104:{
    #####:  105:	struct Edge const *cEdgeA = edgeA;
    #####:  106:	struct Edge const *cEdgeB = edgeB;
        -:  107:
    #####:  108:	return(cEdgeA->distance - cEdgeB->distance);
        -:  109:}
        -:  110:
        -:  111:/*
        -:  112:*	Trie une matrice d'arêtes dans l'ordre croissant de la distance entre deux villes
        -:  113:*
        -:  114:*	@param matrixEdge, tableau d'arêtes 
        -:  115:*	@param nbEdges, nombre d'arêtes (taille) de la matrice
        -:  116:*	@return un entier selon si le processus de trie s'est déroulé avec succès ou non.
        -:  117:*/
    #####:  118:int quickSortDistance(struct Edge *matrixEdges, int nbEdges)
        -:  119:{
    #####:  120:	qsort(matrixEdges, nbEdges, sizeof(struct Edge), sortByDistance);
    #####:  121:	return 0;
        -:  122:}
        -:  123:
        -:  124:/*
        -:  125:*	Trie une matrice de ville dans l'ordre décroissant de la population de chaque ville
        -:  126:*
        -:  127:*	@param matrixCities, tableau des villes contenant le nom, la population et les coordonnées de chaque ville.
        -:  128:*	@param nbCities, nombre de villes (taille) de la matrice
        -:  129:*	@return un entier selon si le processus de tri s'est déroulé avec succès ou non.
        -:  130:*/
        1:  131:int quickSortPopulation(struct City *matrixCities, int nbCities)
        -:  132:{
        1:  133:	qsort(matrixCities, nbCities, sizeof(struct City), sortByPopulation);
        1:  134:	return 0;
        -:  135:}	
        -:  136:
        -:  137:/*
        -:  138:*	Trouve la distance entre 2 villes dans la matrice
        -:  139:*
        -:  140:*	@param g, est une matrice de n entier par n entier (représentant la distance entre 2 villes) où n représente le nombre de ville.
        -:  141:*	@param cityA, ville représentée par un entier (indice de la matrice du graphe g).
        -:  142:*	@param cityB, ville représentée par un entier (indice de la matrice du graphe g).
        -:  143:*	@return un float, la distance entre les paramètres cityA et cityB.
        -:  144:*/
       15:  145:float getDistance(struct Graph g, int cityA, int cityB)
        -:  146:{
       15:  147:	if(cityA < cityB)
        -:  148:	{
       10:  149:		return g.matrix[cityA][cityB];
        -:  150:	}
        5:  151:	else if(cityA > cityB)
        -:  152:	{
        3:  153:		return g.matrix[cityB][cityA];
        -:  154:	}
        -:  155:	else
        -:  156:	{
        2:  157:		return -1;
        -:  158:	}
        -:  159:}
        -:  160:
        -:  161:/*
        -:  162:*	Calcul le chemin le plus court entre 2 villes en utilisant l'algorithme de Dijkstra
        -:  163:*
        -:  164:*	@param g, est une matrice de n entier par n entier (représentant la distance entre 2 villes) où n représente le nombre de ville.
        -:  165:*	@param cityA, ville représentée par un entier (indice de la matrice du graphe g).
        -:  166:*	@param cityB, ville représentée par un entier (indice de la matrice du graphe g).
        -:  167:*	@return un tableau d'entiers, le chemin le plus court entre les paramètres cityA et cityB où chaque case représente
        -:  168:*		l'indice de la ville dans le tableau de ville.
        -:  169:*/
        1:  170:int shortestPath(struct Graph g, int cityA, int cityB, int* path)
        -:  171:{
        1:  172:	int i, j, newCity = 0;
        -:  173:	float min, dist;
        1:  174:	int city = cityA;
        1:  175:	int newCityFound = 1;
        1:  176:	int* father = (int*) malloc(g.nbCities * sizeof(int));
        1:  177:	float* length = (float*) malloc(g.nbCities * sizeof(float));
        1:  178:	int* visited = (int*) malloc(g.nbCities * sizeof(int));
        -:  179:
        4:  180:	for(i = 0; i < g.nbCities; i++)
        -:  181:	{
        3:  182:		path[i] = -1;
        -:  183:	}
        -:  184:
        4:  185:	for(i = 0; i < g.nbCities; i++)
        -:  186:	{
        3:  187:		father[i] = -1;
        3:  188:		length[i] = -1.0;
        3:  189:		visited[i] = -1;
        -:  190:	}
        -:  191:	
        1:  192:	length[city] = 0;
        4:  193:	while(city != cityB && newCityFound)
        -:  194:	{
        8:  195:		for(i = 0; i < g.nbCities; i++)
        -:  196:		{
        6:  197:			dist = getDistance(g, i, city);
        -:  198:			
        6:  199:			if((dist > 0.0) && (visited[i] == -1))
        -:  200:			{
        3:  201:				if((length[i] == -1.0) || (dist + length[city] < length[i]))
        -:  202:				{
        2:  203:					length[i] = dist + length[city];
        -:  204:					
        2:  205:					father[i] = city;
        -:  206:				}					
        -:  207:			}
        -:  208:		}
        -:  209:		
        2:  210:		min = 10000000;
        2:  211:		newCityFound = 0;
        -:  212:		
        8:  213:		for(i = 0; i < g.nbCities; i++)
        -:  214:		{
        6:  215:			if((length[i] < min) && (visited[i] == -1) && (length[i] > 0))
        -:  216:			{
        2:  217:				min = length[i];
        2:  218:				newCity = i;
        2:  219:				newCityFound = 1;
        -:  220:			}
        -:  221:		}
        -:  222:
        2:  223:		visited[newCity] = 0;
        2:  224:		city = newCity;
        -:  225:		
        -:  226:	}
        -:  227:	
        1:  228:	if (!newCityFound)
        -:  229:	{
    #####:  230:		free(father);
    #####:  231:		free(visited);
    #####:  232:		free(length);
    #####:  233:		return 0;
        -:  234:	}
        -:  235:	else
        -:  236:	{
        1:  237:		i = cityB;
        1:  238:		path[0] = cityB;
        1:  239:		j = 0;
        -:  240:	
        4:  241:		while(path[j] != cityA)
        -:  242:		{
        2:  243:			j++;
        2:  244:			path[j] = father[i];
        2:  245:			i = father[i];
        -:  246:		}
        -:  247:
        1:  248:		free(father);
        1:  249:		free(visited);
        1:  250:		free(length);
        -:  251:
        1:  252:		return 1;
        -:  253:	}
        -:  254:}
        -:  255:
        -:  256:/*
        -:  257:*	Calcule le rapport entre le nombre d'arêtes effectives d'un graphe g 
        -:  258:*	et le nombre d'arêtes obtenues dans le graphe complet de g
        -:  259:*
        -:  260:*	@param g, graphe
        -:  261:*	@return le pourcentage de ce rapport
        -:  262:*/
        2:  263:float graphEdgesPourcentage(struct Graph g)
        -:  264:{
        2:  265:	float nbEdges = 0.0, nbEdgePossible = 0.0;
        -:  266:	int i,j;
        6:  267:	for (i = 0; i < g.nbCities-1; i++)
        -:  268:	{
       10:  269:		for (j = i+1; j < g.nbCities; j++)
        -:  270:		{
        6:  271:			if(getDistance(g,i,j) != -1.0)
        -:  272:			{
        4:  273:				nbEdges=nbEdges + 1.0;
        -:  274:			}
        -:  275:		}
        -:  276:	}
        -:  277:
        2:  278:	nbEdgePossible = (g.nbCities*(g.nbCities-1)) / 2.0;
        -:  279:
        2:  280:	if (nbEdgePossible == 0)
        -:  281:	{
    #####:  282:		return 0;
        -:  283:	}
        -:  284:	else
        -:  285:	{
        2:  286:		return ((nbEdges/nbEdgePossible)*100);
        -:  287:	}
        -:  288:}
        -:  289:
        -:  290:/*
        -:  291:*	Calcul du sous arbre recouvrant minimal
        -:  292:*
        -:  293:*	@param g, graphe
        -:  294:*	@return un graphe avec les liaisons du sous arbre recouvrant minimal
        -:  295:*/
    #####:  296:struct Graph* minSpanningTree(struct Graph g)
        -:  297:{
    #####:  298:	int l, c, i=0, nbEdges=0, cityA=-1, cityB=-1;
        -:  299:	int isConnexe;
        -:  300:	struct Edge edge;
    #####:  301:	struct Graph* newGraph=NULL;
    #####:  302:	struct Edge* matrixEdges=NULL;
    #####:  303:	int* connexeComp=NULL;
        -:  304:	float** matrix;
        -:  305:	int aux, j, k;
        -:  306: 
    #####:  307:	newGraph =(struct Graph*) malloc(sizeof(struct Graph));
    #####:  308:	newGraph->nbCities = g.nbCities;
        -:  309:
    #####:  310:	connexeComp = malloc(g.nbCities * sizeof(int));
    #####:  311:	matrixEdges = malloc((g.nbCities*g.nbCities) * sizeof(struct Edge));
        -:  312:
    #####:  313:	newGraph->matrixCities = malloc(g.nbCities * sizeof(struct City));
        -:  314:
    #####:  315:	for(j = 0; j < g.nbCities; j++)
        -:  316:	{
    #####:  317:		newGraph->matrixCities[j] = g.matrixCities[j];
        -:  318:	}
        -:  319:
    #####:  320:	matrix = initMatrix(g.nbCities);
        -:  321:
    #####:  322:	for(j = 0; j < g.nbCities; j++)
        -:  323:	{
    #####:  324:		for(k = 0; k < g.nbCities; k++)
        -:  325:		{
    #####:  326:			matrix[j][k] = -1.0;
        -:  327:		}
        -:  328:	}
        -:  329:
    #####:  330:	for (l = 0; l < g.nbCities-1; l++)
        -:  331:	{
    #####:  332:		for (c = l+1; c < g.nbCities; c++)
        -:  333:		{
    #####:  334:			if(g.matrix[l][c] != -1)
        -:  335:			{
    #####:  336:				edge.cityA = l;
    #####:  337:				edge.cityB = c;
    #####:  338:				edge.distance = g.matrix[l][c];
    #####:  339:				matrixEdges[i] = edge;
    #####:  340:				i++;
        -:  341:			}
        -:  342:		}
        -:  343:	}
        -:  344:
    #####:  345:	nbEdges = i;
    #####:  346:	quickSortDistance(matrixEdges, nbEdges);
        -:  347:
        -:  348:
    #####:  349:	for (i = 0; i < g.nbCities; i++)
        -:  350:	{
    #####:  351:		connexeComp[i] = i;
        -:  352:	}
        -:  353:
    #####:  354:	k = 0;
    #####:  355:	j = 0;
        -:  356:    
    #####:  357:	while (k < (g.nbCities-1) && j<nbEdges)
        -:  358:	{
    #####:  359:		cityA= matrixEdges[j].cityA;
    #####:  360:		cityB= matrixEdges[j].cityB;
    #####:  361:		if (connexeComp[cityA] != connexeComp[cityB])
        -:  362:		{
    #####:  363:			k++;
    #####:  364:			matrix[cityA][cityB] = getDistance(g, cityA, cityB);
    #####:  365:			aux = connexeComp[cityB];
        -:  366:
    #####:  367:			for (i = 0; i < g.nbCities; i++)
        -:  368:			{
    #####:  369:				if (connexeComp[i] == aux)
        -:  370:				{
    #####:  371:					connexeComp[i] = connexeComp[cityA];
        -:  372:         			}
        -:  373:			}
        -:  374:		}
    #####:  375:		j++;
        -:  376:	}
        -:  377:
    #####:  378:	i = 0;
    #####:  379:	isConnexe = 1;
        -:  380:
    #####:  381:	while (i < g.nbCities-1 && isConnexe)
        -:  382:	{
    #####:  383:		if (connexeComp[i] != connexeComp[i+1])
        -:  384:		{
    #####:  385:			isConnexe = 0;
        -:  386:		}
    #####:  387:		i++;
        -:  388:	}
        -:  389:
    #####:  390:	newGraph->matrix = matrix;
        -:  391:
    #####:  392:	if (isConnexe == 0)
        -:  393:	{
    #####:  394:		free(connexeComp);
    #####:  395:		free(matrixEdges);
    #####:  396:		deleteGraph(*newGraph);
    #####:  397:		free(newGraph);
    #####:  398:		printf("The graph is not connected : there is no minimum spanning tree between these cities.\n");
    #####:  399:		return NULL;
        -:  400:	}
        -:  401:	
        -:  402:
    #####:  403:	free(connexeComp);
    #####:  404:	free(matrixEdges);
        -:  405:
    #####:  406:	return newGraph;
        -:  407:}
        -:  408:
        -:  409:/*
        -:  410:*	Supprime le graphe de la mémoire
        -:  411:*
        -:  412:*	@param Graph, est une matrice de n entier par n entier (représentant la distance entre 2 villes) où n représente le nombre de ville.
        -:  413:*/
    #####:  414:void deleteGraph(struct Graph graph)
        -:  415:{
        -:  416:	int i;
    #####:  417:	for (i = 0 ; i<graph.nbCities ; i++)
        -:  418:	{
    #####:  419:		free(graph.matrix[i]);
    #####:  420:		graph.matrix[i] = NULL ;
        -:  421:	}
    #####:  422:	free(graph.matrix);
    #####:  423:	free(graph.matrixCities);
    #####:  424:}
        -:  425:
